extends Node

enum Стадия_матча_тип {Подготовка_матча, Начало_матча, Мулиган, Матч, Конец_матча}
var стадия_матча: Стадия_матча_тип



var Карты1: Array
var Карты2: Array
var КриваяСтол_X: Curve = load("res://Основа/позиция_карт_в_руке_X.tres")

var поле_матча:PackedScene = load("res://стол3d.tscn")

var манаИгрок1: float = 0
var макс_мана = 10
var манаИгрок2: float = 0
var восстановление_маны: bool = true
var мана1_текст 
var мана2_текст 
var таймер_маны: Timer
var запуск_таймера: bool = true
var скорость_вост: float = 0.5
var время_идёт: bool = true
var время: float = 0
var время_матча
func _ready():
	pass
func позицияТокенов():
	var позСтола = get_tree().current_scene.find_child("Карты1", true, false).find_child("позКарт").position
	for токен in Карты1:
		токен.новая_позиция = позСтола + Vector3(2 * Карты1.find(токен) - Карты1.size()+1,0,0)
		
	pass

func токеныПротивника():
	pass

func _process(_delta):
	match стадия_матча:
		Стадия_матча_тип.Подготовка_матча:
			подготовить_матч()
		Стадия_матча_тип.Начало_матча:
			начать_матч()
		Стадия_матча_тип.Мулиган:
			мулиганить()
		Стадия_матча_тип.Матч:
			матч()
			pass
		Стадия_матча_тип.Конец_матча:
			pass
#		Стадия_матча_тип.Я_начало:
#			мой_ход_начало()
#		Стадия_матча_тип.Враг_начало:
#			чужой_ход_начало()
	var ha = find_child("Стадия_текст", true, false)
	if ha != null:
		ha.set_text(str(Стадия_матча_тип.find_key(стадия_матча)))
	
	pass
	
	
func подготовить_матч():
	var сцена = поле_матча.instantiate()
	get_viewport().get_tree().current_scene.add_child(сцена)
	мана1_текст = сцена.find_child("мана1_текст", true, false)
	мана2_текст = сцена.find_child("мана2_текст", true, false)
	таймер_маны = сцена.find_child("кд мана", true, false)
	таймер_маны.timeout.connect(контроль_маны)
	время_матча = сцена.find_child("время_текст", true, false)
	CardManager.запуск_матча()
	стадия_матча += 1
func начать_матч():
	
	стадия_матча += 1 
	pass
func мулиганить():
	pass
func матч():
	if запуск_таймера:
		if восстановление_маны and манаИгрок1<макс_мана:
			print(манаИгрок1)
			таймер_маны.start()
			print(таймер_маны.wait_time)
			запуск_таймера = false
			pass
	мана1_текст.text = str(int(манаИгрок1))
	контроль_времени()
	время_матча.text = str(int(время))
	pass
#func мой_ход_начало():
##	if манаИгрок1 < 10:
#	стадия_матча += 1
#	манаИгрок1 +=1
#
##	print(манаИгрок1)
#	pass
#func чужой_ход_начало():
##	if манаИгрок2 < 10:
#	стадия_матча += 1
#	манаИгрок2 +=1
#
##	print(манаИгрок2)
#	pass
func окончить_матч():
	pass
	
func контроль_маны():
	if манаИгрок1<макс_мана:
		манаИгрок1 += таймер_маны.wait_time * скорость_вост
	else:
		таймер_маны.stop()
		запуск_таймера = true
	pass

func контроль_времени():
	if время_идёт:
		время += get_process_delta_time()
	print(время)
func изменить_ману(ввод):
	ввод = ввод.split(" ", false)
	var игрок 
	var операция
	var значение
	значение = int(ввод[2])
	print(ввод)
	match ввод[0]:
		"Игрок1":
			игрок = манаИгрок1
		"Игрок2":
			игрок = манаИгрок2
			pass
		_:
			print("Игрок не найден")
			return
	match ввод[1]:
		"плюс", "+":
			игрок += значение

		"минус", "-":
			игрок -= значение
	if игрок <0:
		игрок = 0
	match ввод[0]:
		"Игрок1":
			манаИгрок1 = игрок
		"Игрок2":
			манаИгрок2 = игрок
			pass
	pass

func контроль_стадии():
	if стадия_матча < Стадия_матча_тип.size()-1:
		стадия_матча += 1
	else: стадия_матча = 1
func закрыть_игру():
	get_tree().quit()
